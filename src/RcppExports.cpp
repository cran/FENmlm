// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cpp_lgamma
NumericVector cpp_lgamma(NumericVector x);
RcppExport SEXP _FENmlm_cpp_lgamma(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_lgamma(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_log_a_exp
NumericVector cpp_log_a_exp(double a, NumericVector mu, NumericVector exp_mu);
RcppExport SEXP _FENmlm_cpp_log_a_exp(SEXP aSEXP, SEXP muSEXP, SEXP exp_muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exp_mu(exp_muSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_log_a_exp(a, mu, exp_mu));
    return rcpp_result_gen;
END_RCPP
}
// RcppPartialDerivative
NumericMatrix RcppPartialDerivative(int iterMax, int Q, int N, int K, double epsDeriv, NumericVector ll_d2, NumericMatrix F, NumericVector init, IntegerMatrix dumMat, IntegerVector nbCluster);
RcppExport SEXP _FENmlm_RcppPartialDerivative(SEXP iterMaxSEXP, SEXP QSEXP, SEXP NSEXP, SEXP KSEXP, SEXP epsDerivSEXP, SEXP ll_d2SEXP, SEXP FSEXP, SEXP initSEXP, SEXP dumMatSEXP, SEXP nbClusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type epsDeriv(epsDerivSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ll_d2(ll_d2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type F(FSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type dumMat(dumMatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbCluster(nbClusterSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppPartialDerivative(iterMax, Q, N, K, epsDeriv, ll_d2, F, init, dumMat, nbCluster));
    return rcpp_result_gen;
END_RCPP
}
// RcppPartialDerivative_gaussian
NumericMatrix RcppPartialDerivative_gaussian(int iterMax, int Q, int N, int K, double epsDeriv, NumericMatrix F, NumericVector init, IntegerMatrix dumMat, IntegerVector nbCluster);
RcppExport SEXP _FENmlm_RcppPartialDerivative_gaussian(SEXP iterMaxSEXP, SEXP QSEXP, SEXP NSEXP, SEXP KSEXP, SEXP epsDerivSEXP, SEXP FSEXP, SEXP initSEXP, SEXP dumMatSEXP, SEXP nbClusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type epsDeriv(epsDerivSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type F(FSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type dumMat(dumMatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbCluster(nbClusterSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppPartialDerivative_gaussian(iterMax, Q, N, K, epsDeriv, F, init, dumMat, nbCluster));
    return rcpp_result_gen;
END_RCPP
}
// RcppPartialDerivative_other
NumericVector RcppPartialDerivative_other(int iterMax, int Q, int N, double epsDeriv, NumericVector ll_d2, NumericVector dx_dother, NumericVector init, IntegerMatrix dumMat, IntegerVector nbCluster);
RcppExport SEXP _FENmlm_RcppPartialDerivative_other(SEXP iterMaxSEXP, SEXP QSEXP, SEXP NSEXP, SEXP epsDerivSEXP, SEXP ll_d2SEXP, SEXP dx_dotherSEXP, SEXP initSEXP, SEXP dumMatSEXP, SEXP nbClusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type epsDeriv(epsDerivSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ll_d2(ll_d2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dx_dother(dx_dotherSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type dumMat(dumMatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbCluster(nbClusterSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppPartialDerivative_other(iterMax, Q, N, epsDeriv, ll_d2, dx_dother, init, dumMat, nbCluster));
    return rcpp_result_gen;
END_RCPP
}
// RcppGetFE
List RcppGetFE(int Q, int N, NumericVector S, IntegerMatrix dumMat, IntegerVector nbCluster, IntegerVector obsCluster);
RcppExport SEXP _FENmlm_RcppGetFE(SEXP QSEXP, SEXP NSEXP, SEXP SSEXP, SEXP dumMatSEXP, SEXP nbClusterSEXP, SEXP obsClusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type S(SSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type dumMat(dumMatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbCluster(nbClusterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsCluster(obsClusterSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppGetFE(Q, N, S, dumMat, nbCluster, obsCluster));
    return rcpp_result_gen;
END_RCPP
}
// cpp_NB_dum_fx
double cpp_NB_dum_fx(double theta, NumericVector lhs, NumericVector mu, double x1, IntegerVector obsCluster, int start, int end);
RcppExport SEXP _FENmlm_cpp_NB_dum_fx(SEXP thetaSEXP, SEXP lhsSEXP, SEXP muSEXP, SEXP x1SEXP, SEXP obsClusterSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsCluster(obsClusterSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_NB_dum_fx(theta, lhs, mu, x1, obsCluster, start, end));
    return rcpp_result_gen;
END_RCPP
}
// cpp_NB_dum_dfx
double cpp_NB_dum_dfx(double theta, NumericVector lhs, NumericVector mu, double x1, IntegerVector obsCluster, int start, int end);
RcppExport SEXP _FENmlm_cpp_NB_dum_dfx(SEXP thetaSEXP, SEXP lhsSEXP, SEXP muSEXP, SEXP x1SEXP, SEXP obsClusterSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsCluster(obsClusterSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_NB_dum_dfx(theta, lhs, mu, x1, obsCluster, start, end));
    return rcpp_result_gen;
END_RCPP
}
// RcppCreate_start_end_indexes
NumericMatrix RcppCreate_start_end_indexes(IntegerVector nbCluster, IntegerVector tableCluster_vect);
RcppExport SEXP _FENmlm_RcppCreate_start_end_indexes(SEXP nbClusterSEXP, SEXP tableCluster_vectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type nbCluster(nbClusterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tableCluster_vect(tableCluster_vectSEXP);
    rcpp_result_gen = Rcpp::wrap(RcppCreate_start_end_indexes(nbCluster, tableCluster_vect));
    return rcpp_result_gen;
END_RCPP
}
// cpp_DichotomyNR
NumericVector cpp_DichotomyNR(int N, int K, int family, double theta, double epsDicho, NumericVector lhs, NumericVector mu, NumericVector borne_inf, NumericVector borne_sup, IntegerVector obsCluster, IntegerVector tableCluster);
RcppExport SEXP _FENmlm_cpp_DichotomyNR(SEXP NSEXP, SEXP KSEXP, SEXP familySEXP, SEXP thetaSEXP, SEXP epsDichoSEXP, SEXP lhsSEXP, SEXP muSEXP, SEXP borne_infSEXP, SEXP borne_supSEXP, SEXP obsClusterSEXP, SEXP tableClusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type epsDicho(epsDichoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type borne_inf(borne_infSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type borne_sup(borne_supSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsCluster(obsClusterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tableCluster(tableClusterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_DichotomyNR(N, K, family, theta, epsDicho, lhs, mu, borne_inf, borne_sup, obsCluster, tableCluster));
    return rcpp_result_gen;
END_RCPP
}
// cpp_conditional_minMaxMean
NumericMatrix cpp_conditional_minMaxMean(int K, int N, NumericVector mu, IntegerVector dum, IntegerVector tableCluster);
RcppExport SEXP _FENmlm_cpp_conditional_minMaxMean(SEXP KSEXP, SEXP NSEXP, SEXP muSEXP, SEXP dumSEXP, SEXP tableClusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dum(dumSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tableCluster(tableClusterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_conditional_minMaxMean(K, N, mu, dum, tableCluster));
    return rcpp_result_gen;
END_RCPP
}
// cpp_conditional_minMax
NumericMatrix cpp_conditional_minMax(int K, int N, NumericVector mu, IntegerVector dum, IntegerVector tableCluster);
RcppExport SEXP _FENmlm_cpp_conditional_minMax(SEXP KSEXP, SEXP NSEXP, SEXP muSEXP, SEXP dumSEXP, SEXP tableClusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dum(dumSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tableCluster(tableClusterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_conditional_minMax(K, N, mu, dum, tableCluster));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tapply_sum
NumericMatrix cpp_tapply_sum(int Q, NumericMatrix x, IntegerVector dum);
RcppExport SEXP _FENmlm_cpp_tapply_sum(SEXP QSEXP, SEXP xSEXP, SEXP dumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dum(dumSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tapply_sum(Q, x, dum));
    return rcpp_result_gen;
END_RCPP
}
// cpp_tapply_vsum
NumericVector cpp_tapply_vsum(int Q, NumericVector x, IntegerVector dum);
RcppExport SEXP _FENmlm_cpp_tapply_vsum(SEXP QSEXP, SEXP xSEXP, SEXP dumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dum(dumSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tapply_vsum(Q, x, dum));
    return rcpp_result_gen;
END_RCPP
}
// cpp_table
NumericVector cpp_table(int Q, IntegerVector dum);
RcppExport SEXP _FENmlm_cpp_table(SEXP QSEXP, SEXP dumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dum(dumSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_table(Q, dum));
    return rcpp_result_gen;
END_RCPP
}
// cpp_make_contrast
IntegerMatrix cpp_make_contrast(int N, int K, IntegerVector fact_num, bool addRef);
RcppExport SEXP _FENmlm_cpp_make_contrast(SEXP NSEXP, SEXP KSEXP, SEXP fact_numSEXP, SEXP addRefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type fact_num(fact_numSEXP);
    Rcpp::traits::input_parameter< bool >::type addRef(addRefSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_make_contrast(N, K, fact_num, addRef));
    return rcpp_result_gen;
END_RCPP
}
// cpp_unik_id
NumericVector cpp_unik_id(IntegerVector x_sorted);
RcppExport SEXP _FENmlm_cpp_unik_id(SEXP x_sortedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x_sorted(x_sortedSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_unik_id(x_sorted));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_compute_sum_clusters
NumericVector Rcpp_compute_sum_clusters(int N, int Q, int family, double theta, double epsMu, NumericVector init, NumericVector lhs, NumericVector sum_y, NumericVector mu, IntegerVector dum_vect, IntegerVector nbCluster, NumericVector tableCluster_vect, IntegerVector obsCluster_vect, IntegerVector start_cluster_vect, IntegerVector end_cluster_vect);
RcppExport SEXP _FENmlm_Rcpp_compute_sum_clusters(SEXP NSEXP, SEXP QSEXP, SEXP familySEXP, SEXP thetaSEXP, SEXP epsMuSEXP, SEXP initSEXP, SEXP lhsSEXP, SEXP sum_ySEXP, SEXP muSEXP, SEXP dum_vectSEXP, SEXP nbClusterSEXP, SEXP tableCluster_vectSEXP, SEXP obsCluster_vectSEXP, SEXP start_cluster_vectSEXP, SEXP end_cluster_vectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type epsMu(epsMuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sum_y(sum_ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dum_vect(dum_vectSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbCluster(nbClusterSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tableCluster_vect(tableCluster_vectSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsCluster_vect(obsCluster_vectSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type start_cluster_vect(start_cluster_vectSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type end_cluster_vect(end_cluster_vectSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_compute_sum_clusters(N, Q, family, theta, epsMu, init, lhs, sum_y, mu, dum_vect, nbCluster, tableCluster_vect, obsCluster_vect, start_cluster_vect, end_cluster_vect));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_unclassFactor
IntegerVector Rcpp_unclassFactor(NumericVector x);
RcppExport SEXP _FENmlm_Rcpp_unclassFactor(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_unclassFactor(x));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_Ax_Ais1
NumericVector Rcpp_Ax_Ais1(IntegerMatrix dumMat, IntegerVector nbCluster, IntegerVector tableCluster_all, NumericVector x);
RcppExport SEXP _FENmlm_Rcpp_Ax_Ais1(SEXP dumMatSEXP, SEXP nbClusterSEXP, SEXP tableCluster_allSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type dumMat(dumMatSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbCluster(nbClusterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tableCluster_all(tableCluster_allSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_Ax_Ais1(dumMat, nbCluster, tableCluster_all, x));
    return rcpp_result_gen;
END_RCPP
}
// new_cpp_NB_dum_fx
double new_cpp_NB_dum_fx(double theta, NumericVector lhs, NumericVector exp_mu, double x1, IntegerVector obsCluster, int start, int end);
RcppExport SEXP _FENmlm_new_cpp_NB_dum_fx(SEXP thetaSEXP, SEXP lhsSEXP, SEXP exp_muSEXP, SEXP x1SEXP, SEXP obsClusterSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exp_mu(exp_muSEXP);
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsCluster(obsClusterSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(new_cpp_NB_dum_fx(theta, lhs, exp_mu, x1, obsCluster, start, end));
    return rcpp_result_gen;
END_RCPP
}
// new_cpp_NB_dum_dfx
double new_cpp_NB_dum_dfx(double theta, NumericVector lhs, NumericVector exp_mu, double x1, IntegerVector obsCluster, int start, int end);
RcppExport SEXP _FENmlm_new_cpp_NB_dum_dfx(SEXP thetaSEXP, SEXP lhsSEXP, SEXP exp_muSEXP, SEXP x1SEXP, SEXP obsClusterSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exp_mu(exp_muSEXP);
    Rcpp::traits::input_parameter< double >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsCluster(obsClusterSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(new_cpp_NB_dum_dfx(theta, lhs, exp_mu, x1, obsCluster, start, end));
    return rcpp_result_gen;
END_RCPP
}
// new_RcppDichotomyNR
NumericVector new_RcppDichotomyNR(int N, int K, int family, double theta, double epsDicho, NumericVector lhs, NumericVector exp_mu, NumericVector borne_inf, NumericVector borne_sup, IntegerVector obsCluster, IntegerVector tableCluster);
RcppExport SEXP _FENmlm_new_RcppDichotomyNR(SEXP NSEXP, SEXP KSEXP, SEXP familySEXP, SEXP thetaSEXP, SEXP epsDichoSEXP, SEXP lhsSEXP, SEXP exp_muSEXP, SEXP borne_infSEXP, SEXP borne_supSEXP, SEXP obsClusterSEXP, SEXP tableClusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type epsDicho(epsDichoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exp_mu(exp_muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type borne_inf(borne_infSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type borne_sup(borne_supSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsCluster(obsClusterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tableCluster(tableClusterSEXP);
    rcpp_result_gen = Rcpp::wrap(new_RcppDichotomyNR(N, K, family, theta, epsDicho, lhs, exp_mu, borne_inf, borne_sup, obsCluster, tableCluster));
    return rcpp_result_gen;
END_RCPP
}
// sum_double_index
List sum_double_index(int n_i, int n_j, IntegerVector index_i, IntegerVector index_j, NumericVector x);
RcppExport SEXP _FENmlm_sum_double_index(SEXP n_iSEXP, SEXP n_jSEXP, SEXP index_iSEXP, SEXP index_jSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_i(n_iSEXP);
    Rcpp::traits::input_parameter< int >::type n_j(n_jSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index_i(index_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index_j(index_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_double_index(n_i, n_j, index_i, index_j, x));
    return rcpp_result_gen;
END_RCPP
}
// matmult
NumericVector matmult(IntegerVector index_i, IntegerVector index_j, NumericVector matcoef, NumericVector x);
RcppExport SEXP _FENmlm_matmult(SEXP index_iSEXP, SEXP index_jSEXP, SEXP matcoefSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type index_i(index_iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index_j(index_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type matcoef(matcoefSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(matmult(index_i, index_j, matcoef, x));
    return rcpp_result_gen;
END_RCPP
}
// mmult
SEXP mmult(int n, SEXP index_i, SEXP index_j, SEXP coefmat, SEXP x);
RcppExport SEXP _FENmlm_mmult(SEXP nSEXP, SEXP index_iSEXP, SEXP index_jSEXP, SEXP coefmatSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type index_i(index_iSEXP);
    Rcpp::traits::input_parameter< SEXP >::type index_j(index_jSEXP);
    Rcpp::traits::input_parameter< SEXP >::type coefmat(coefmatSEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(mmult(n, index_i, index_j, coefmat, x));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_DichotomyNR
NumericVector cpppar_DichotomyNR(int nthreads, int K, int family, double theta, double epsDicho, NumericVector lhs, NumericVector mu, NumericVector borne_inf, NumericVector borne_sup, IntegerVector obsCluster, IntegerVector tableCluster);
RcppExport SEXP _FENmlm_cpppar_DichotomyNR(SEXP nthreadsSEXP, SEXP KSEXP, SEXP familySEXP, SEXP thetaSEXP, SEXP epsDichoSEXP, SEXP lhsSEXP, SEXP muSEXP, SEXP borne_infSEXP, SEXP borne_supSEXP, SEXP obsClusterSEXP, SEXP tableClusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type epsDicho(epsDichoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lhs(lhsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type borne_inf(borne_infSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type borne_sup(borne_supSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsCluster(obsClusterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tableCluster(tableClusterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_DichotomyNR(nthreads, K, family, theta, epsDicho, lhs, mu, borne_inf, borne_sup, obsCluster, tableCluster));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_tapply_vsum
NumericVector cpppar_tapply_vsum(int nthreads, int K, NumericVector x, IntegerVector obsCluster, IntegerVector tableCluster);
RcppExport SEXP _FENmlm_cpppar_tapply_vsum(SEXP nthreadsSEXP, SEXP KSEXP, SEXP xSEXP, SEXP obsClusterSEXP, SEXP tableClusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsCluster(obsClusterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tableCluster(tableClusterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_tapply_vsum(nthreads, K, x, obsCluster, tableCluster));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_PartialDerivative
NumericMatrix cpppar_PartialDerivative(int nthreads, int Q, int N, int V, double epsDeriv, NumericVector ll_d2, NumericMatrix F, NumericVector init, IntegerMatrix obsCluster, IntegerVector tableCluster, IntegerVector nbCluster);
RcppExport SEXP _FENmlm_cpppar_PartialDerivative(SEXP nthreadsSEXP, SEXP QSEXP, SEXP NSEXP, SEXP VSEXP, SEXP epsDerivSEXP, SEXP ll_d2SEXP, SEXP FSEXP, SEXP initSEXP, SEXP obsClusterSEXP, SEXP tableClusterSEXP, SEXP nbClusterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type epsDeriv(epsDerivSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ll_d2(ll_d2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type F(FSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type obsCluster(obsClusterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type tableCluster(tableClusterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nbCluster(nbClusterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_PartialDerivative(nthreads, Q, N, V, epsDeriv, ll_d2, F, init, obsCluster, tableCluster, nbCluster));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_exp
NumericVector cpppar_exp(NumericVector x, int nthreads);
RcppExport SEXP _FENmlm_cpppar_exp(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_exp(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_log
NumericVector cpppar_log(NumericVector x, int nthreads);
RcppExport SEXP _FENmlm_cpppar_log(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_log(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_log_a_exp
NumericVector cpppar_log_a_exp(int nthreads, double a, NumericVector mu, NumericVector exp_mu);
RcppExport SEXP _FENmlm_cpppar_log_a_exp(SEXP nthreadsSEXP, SEXP aSEXP, SEXP muSEXP, SEXP exp_muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exp_mu(exp_muSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_log_a_exp(nthreads, a, mu, exp_mu));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_lgamma
NumericVector cpppar_lgamma(NumericVector x, int nthreads);
RcppExport SEXP _FENmlm_cpppar_lgamma(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_lgamma(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_digamma
NumericVector cpppar_digamma(NumericVector x, int nthreads);
RcppExport SEXP _FENmlm_cpppar_digamma(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_digamma(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}
// cpppar_trigamma
NumericVector cpppar_trigamma(NumericVector x, int nthreads);
RcppExport SEXP _FENmlm_cpppar_trigamma(SEXP xSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpppar_trigamma(x, nthreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FENmlm_cpp_lgamma", (DL_FUNC) &_FENmlm_cpp_lgamma, 1},
    {"_FENmlm_cpp_log_a_exp", (DL_FUNC) &_FENmlm_cpp_log_a_exp, 3},
    {"_FENmlm_RcppPartialDerivative", (DL_FUNC) &_FENmlm_RcppPartialDerivative, 10},
    {"_FENmlm_RcppPartialDerivative_gaussian", (DL_FUNC) &_FENmlm_RcppPartialDerivative_gaussian, 9},
    {"_FENmlm_RcppPartialDerivative_other", (DL_FUNC) &_FENmlm_RcppPartialDerivative_other, 9},
    {"_FENmlm_RcppGetFE", (DL_FUNC) &_FENmlm_RcppGetFE, 6},
    {"_FENmlm_cpp_NB_dum_fx", (DL_FUNC) &_FENmlm_cpp_NB_dum_fx, 7},
    {"_FENmlm_cpp_NB_dum_dfx", (DL_FUNC) &_FENmlm_cpp_NB_dum_dfx, 7},
    {"_FENmlm_RcppCreate_start_end_indexes", (DL_FUNC) &_FENmlm_RcppCreate_start_end_indexes, 2},
    {"_FENmlm_cpp_DichotomyNR", (DL_FUNC) &_FENmlm_cpp_DichotomyNR, 11},
    {"_FENmlm_cpp_conditional_minMaxMean", (DL_FUNC) &_FENmlm_cpp_conditional_minMaxMean, 5},
    {"_FENmlm_cpp_conditional_minMax", (DL_FUNC) &_FENmlm_cpp_conditional_minMax, 5},
    {"_FENmlm_cpp_tapply_sum", (DL_FUNC) &_FENmlm_cpp_tapply_sum, 3},
    {"_FENmlm_cpp_tapply_vsum", (DL_FUNC) &_FENmlm_cpp_tapply_vsum, 3},
    {"_FENmlm_cpp_table", (DL_FUNC) &_FENmlm_cpp_table, 2},
    {"_FENmlm_cpp_make_contrast", (DL_FUNC) &_FENmlm_cpp_make_contrast, 4},
    {"_FENmlm_cpp_unik_id", (DL_FUNC) &_FENmlm_cpp_unik_id, 1},
    {"_FENmlm_Rcpp_compute_sum_clusters", (DL_FUNC) &_FENmlm_Rcpp_compute_sum_clusters, 15},
    {"_FENmlm_Rcpp_unclassFactor", (DL_FUNC) &_FENmlm_Rcpp_unclassFactor, 1},
    {"_FENmlm_Rcpp_Ax_Ais1", (DL_FUNC) &_FENmlm_Rcpp_Ax_Ais1, 4},
    {"_FENmlm_new_cpp_NB_dum_fx", (DL_FUNC) &_FENmlm_new_cpp_NB_dum_fx, 7},
    {"_FENmlm_new_cpp_NB_dum_dfx", (DL_FUNC) &_FENmlm_new_cpp_NB_dum_dfx, 7},
    {"_FENmlm_new_RcppDichotomyNR", (DL_FUNC) &_FENmlm_new_RcppDichotomyNR, 11},
    {"_FENmlm_sum_double_index", (DL_FUNC) &_FENmlm_sum_double_index, 5},
    {"_FENmlm_matmult", (DL_FUNC) &_FENmlm_matmult, 4},
    {"_FENmlm_mmult", (DL_FUNC) &_FENmlm_mmult, 5},
    {"_FENmlm_cpppar_DichotomyNR", (DL_FUNC) &_FENmlm_cpppar_DichotomyNR, 11},
    {"_FENmlm_cpppar_tapply_vsum", (DL_FUNC) &_FENmlm_cpppar_tapply_vsum, 5},
    {"_FENmlm_cpppar_PartialDerivative", (DL_FUNC) &_FENmlm_cpppar_PartialDerivative, 11},
    {"_FENmlm_cpppar_exp", (DL_FUNC) &_FENmlm_cpppar_exp, 2},
    {"_FENmlm_cpppar_log", (DL_FUNC) &_FENmlm_cpppar_log, 2},
    {"_FENmlm_cpppar_log_a_exp", (DL_FUNC) &_FENmlm_cpppar_log_a_exp, 4},
    {"_FENmlm_cpppar_lgamma", (DL_FUNC) &_FENmlm_cpppar_lgamma, 2},
    {"_FENmlm_cpppar_digamma", (DL_FUNC) &_FENmlm_cpppar_digamma, 2},
    {"_FENmlm_cpppar_trigamma", (DL_FUNC) &_FENmlm_cpppar_trigamma, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_FENmlm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
